import sys
from PyQt5.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                            QTabWidget, QMenuBar, QMenu, QAction, QStatusBar,
                            QMessageBox, QFileDialog, QSplitter, QDockWidget)
from PyQt5.QtCore import Qt, QTimer, pyqtSignal
from PyQt5.QtGui import QIcon, QKeySequence

from .styles import AppStyles
from .data_view import DataView
from .portfolio_view import PortfolioView
from .analysis_view import AnalysisView
from .overfitting_view import OverfittingView
from controllers.main_controller import MainController


class MainWindow(QMainWindow):
    """Fen√™tre principale de l'application"""
    
    def __init__(self):
        super().__init__()
        self.controller = MainController()
        self.init_ui()
        self.connect_signals()
        self.controller.initialize_app()
        
    def init_ui(self):
        """Initialise l'interface utilisateur"""
        self.setWindowTitle("Quant Finance Platform - Omega Ratio Trading System")
        self.setGeometry(100, 100, 1600, 900)
        
        # Appliquer le style
        self.setStyleSheet(AppStyles.MAIN_STYLE)
        
        # Widget central
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Layout principal
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)
        
        # Menu supprim√© - Plus besoin avec les onglets
        
        # Cr√©er les onglets
        self.tab_widget = QTabWidget()
        self.tab_widget.setTabPosition(QTabWidget.North)
        
        # Cr√©er les vues
        self.data_view = DataView(self.controller.data_controller)
        self.portfolio_view = PortfolioView(self.controller.portfolio_controller)
        self.analysis_view = AnalysisView(self.controller.analysis_controller)
        self.overfitting_view = OverfittingView()
        
        # Configurer les r√©f√©rences crois√©es
        self.portfolio_view.set_main_window(self)
        
        # Ajouter les onglets
        self.tab_widget.addTab(self.data_view, "üìä Donn√©es")
        self.tab_widget.addTab(self.portfolio_view, "üíº Portfolio & Formules")
        self.tab_widget.addTab(self.analysis_view, "üìà Analyse")
        self.tab_widget.addTab(self.overfitting_view, "üîç D√©tection Overfitting")
        
        # Ajouter les onglets au layout principal
        main_layout.addWidget(self.tab_widget)
        
        # Cr√©er la barre de statut
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("Pr√™t")
        
        # Timer pour les mises √† jour p√©riodiques
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.update_status)
        self.update_timer.start(5000)  # Mise √† jour toutes les 5 secondes
        
    # M√©thode supprim√©e - plus de barre de menu
        
    def connect_signals(self):
        """Connecte les signaux du contr√¥leur"""
        self.controller.status_message.connect(self.update_status_message)
        self.controller.error_message.connect(self.show_error)
        self.controller.progress_update.connect(self.update_progress)
        self.controller.app_ready.connect(self.on_app_ready)
        
        # Connecter le changement d'onglet
        self.tab_widget.currentChanged.connect(self.on_tab_changed)
        
        
    def open_files(self):
        """Ouvre une bo√Æte de dialogue pour s√©lectionner des fichiers CSV"""
        files, _ = QFileDialog.getOpenFileNames(
            self, 
            "S√©lectionner des fichiers CSV",
            self.controller.config['data_directory'],
            "Fichiers CSV (*.csv)"
        )
        
        if files:
            self.controller.load_data_files(files)
            self.data_view.refresh_data()
            self.update_strategies_in_views()
            
    def save_portfolio(self):
        """Sauvegarde le portfolio"""
        file_path, _ = QFileDialog.getSaveFileName(
            self,
            "Sauvegarder Portfolio",
            "",
            "Fichiers JSON (*.json)"
        )
        
        if file_path:
            self.controller.portfolio_controller.save_portfolio(file_path)
            self.update_status_message("Portfolio sauvegard√©")
            
    def export_results(self):
        """Exporte les r√©sultats"""
        file_path, _ = QFileDialog.getSaveFileName(
            self,
            "Exporter R√©sultats",
            "",
            "Fichiers Excel (*.xlsx)"
        )
        
        if file_path:
            self.controller.export_results(file_path)
            
    def optimize_portfolio(self):
        """Lance l'optimisation du portfolio"""
        self.portfolio_view.optimize_portfolio()
        
    def rebalance_portfolio(self):
        """R√©√©quilibre le portfolio"""
        self.controller.portfolio_controller.execute_rebalance()
        self.portfolio_view.update_view()
        
    def run_full_analysis(self):
        """Lance une analyse compl√®te"""
        self.controller.run_full_analysis()
        self.analysis_view.update_view()
        self.tab_widget.setCurrentIndex(3)  # Passer √† l'onglet Analyse
        
    def calculate_omega(self):
        """Calcule le ratio Omega"""
        portfolio_returns = self.controller.portfolio_controller.portfolio.calculate_portfolio_returns()
        if len(portfolio_returns) > 0:
            omega = self.controller.analysis_controller.calculate_omega_ratio(portfolio_returns)
            QMessageBox.information(
                self,
                "Omega Ratio",
                f"Le ratio Omega du portfolio est: {omega:.4f}"
            )
            
    def show_documentation(self):
        """Affiche la documentation"""
        QMessageBox.information(
            self,
            "Documentation",
            "Documentation de la plateforme Quant Finance\n\n"
            "Cette plateforme permet:\n"
            "- Le chargement et l'analyse de donn√©es de trading\n"
            "- La gestion de portfolios multi-strat√©gies\n"
            "- Le backtesting de strat√©gies\n"
            "- L'analyse quantitative avanc√©e avec Omega Ratio\n"
            "- L'optimisation d'allocations\n\n"
            "Pour plus d'informations, consultez le guide utilisateur."
        )
        
    def show_about(self):
        """Affiche la bo√Æte de dialogue √Ä propos"""
        QMessageBox.about(
            self,
            "√Ä propos",
            "Quant Finance Platform v1.0\n\n"
            "Plateforme d'analyse quantitative pour le trading\n"
            "Sp√©cialis√©e dans le calcul du ratio Omega\n\n"
            "D√©velopp√©e avec Python, PyQt5 et pandas\n"
            "Architecture MVC pour une maintenance optimale"
        )
        
    def on_tab_changed(self, index):
        """G√®re le changement d'onglet"""
        tabs = ["data", "portfolio", "analysis", "overfitting"]
        if 0 <= index < len(tabs):
            self.controller.set_current_tab(tabs[index])

            # Rafra√Æchir la vue si n√©cessaire
            if index == 1:  # Portfolio
                self.portfolio_view.update_view()
                self.update_strategies_in_views()
            elif index == 2:  # Analyse
                self.analysis_view.update_view()
            elif index == 3:  # Overfitting Detection
                self.update_strategies_in_views()  # S'assurer que les donn√©es sont √† jour
                self.overfitting_view.analyze_current_formula()
                
    def update_strategies_in_views(self):
        """Met √† jour les strat√©gies dans toutes les vues"""
        try:
            # R√©cup√©rer les strat√©gies du contr√¥leur de donn√©es
            strategies_data = {}
            
            for name, strategy_model in self.controller.data_controller.strategy_models.items():
                if strategy_model and hasattr(strategy_model, 'metrics'):
                    strategies_data[name] = {
                        'sharpe': strategy_model.metrics.get('sharpe_ratio', 0),
                        'omega': strategy_model.metrics.get('omega_ratio', 0),
                        'win_rate': strategy_model.metrics.get('win_rate', 0),
                        'volatility': strategy_model.metrics.get('volatility', 0),
                        'drawdown': strategy_model.metrics.get('max_drawdown', 0),
                        'total_return': strategy_model.metrics.get('total_return', 0)
                    }
                    
            
            # Mettre √† jour le portfolio
            for name, strategy in self.controller.data_controller.strategy_models.items():
                if strategy and name not in self.controller.portfolio_controller.portfolio.strategies:
                    self.controller.portfolio_controller.add_strategy_to_portfolio(name, strategy, 0.0)
                    
        except Exception as e:
            print(f"Erreur mise √† jour strat√©gies: {e}")
                
    def on_app_ready(self):
        """Appel√© quand l'application est pr√™te"""
        self.update_status_message("Application pr√™te")
        
        # Charger automatiquement les fichiers CSV du r√©pertoire
        csv_files = self.controller.data_controller.scan_directory()
        if csv_files:
            reply = QMessageBox.question(
                self,
                "Charger les donn√©es",
                f"{len(csv_files)} fichiers CSV trouv√©s. Voulez-vous les charger?",
                QMessageBox.Yes | QMessageBox.No
            )
            
            if reply == QMessageBox.Yes:
                self.controller.load_data_files(csv_files)
                
    def update_status(self):
        """Met √† jour p√©riodiquement le statut"""
        state = self.controller.get_app_state()
        num_files = len(state['loaded_files'])
        portfolio_value = state['portfolio_summary'].get('current_capital', 0)
        
        status_text = f"Fichiers: {num_files} | Capital: {portfolio_value:,.0f}‚Ç¨"
        self.status_bar.showMessage(status_text)
        
    def update_status_message(self, message):
        """Met √† jour le message de statut"""
        self.status_bar.showMessage(message)
        
    def update_progress(self, value):
        """Met √† jour la barre de progression"""
        # Impl√©mentation future d'une barre de progression
        pass
        
    def show_error(self, message):
        """Affiche un message d'erreur"""
        QMessageBox.critical(self, "Erreur", message)
        
    def closeEvent(self, event):
        """G√®re la fermeture de l'application"""
        reply = QMessageBox.question(
            self,
            "Confirmer la fermeture",
            "Voulez-vous vraiment quitter l'application?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.controller.cleanup()
            event.accept()
        else:
            event.ignore()